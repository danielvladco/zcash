use simple_metrics::enable_simple_recorder;
use tokio::time::{timeout, Duration};

use crate::{
    helpers::initiate_handshake,
    protocol::{
        message::{filter::MessageFilter, Message},
        payload::Nonce,
    },
    setup::node::{Action, Node},
    tests::{
        performance::{duration_as_ms, RequestStats, RequestsTable},
        simple_metrics,
    },
};

#[tokio::test(flavor = "multi_thread", worker_threads = 8)]
async fn ping_pong_latency() {
    // ZG-PERFORMANCE-001, Ping-Pong latency
    //
    // The node behaves as expected under load from other peers.
    //
    // We test the overall performance of a node's Ping-Pong latency.
    //
    // Note: This test does not assert any requirements, but requires manual inspection
    //       of the results table. This is because the results will rely on the machine
    //       running the test.
    //
    // ZCashd: appears to perform well.
    //
    // Zebra: Starts dropping connections from 300 peers onwards.
    //
    // Example test result (with percentile latencies):
    //  *NOTE* run with `cargo test --release tests::performance::ping::ping_pong_latency -- --nocapture`
    //
    //  ZCashd
    //
    // ┌───────┬──────────┬──────────┬──────────┬──────────────┬──────────┬──────────┬──────────┬──────────┬──────────┬──────────┬────────────┐
    // │ peers │ requests │ min (ms) │ max (ms) │ std dev (ms) │ 10% (ms) │ 50% (ms) │ 75% (ms) │ 90% (ms) │ 99% (ms) │ time (s) │ requests/s │
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │      1│      1000│         0│        50│             5│         0│         0│         0│         0│         0│      0.61│     1642.44│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     10│      1000│         0│        69│             5│         0│         0│         0│         0│         1│      0.90│    11051.21│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     20│      1000│         0│        99│             5│         0│         0│         0│         1│         1│      1.32│    15150.90│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     30│      1000│         0│        59│             4│         0│         1│         1│         1│         2│      1.63│    18406.65│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     40│      1000│         0│        60│             4│         1│         1│         1│         2│         3│      2.00│    19955.64│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     50│      1000│         0│        61│             4│         1│         2│         2│         2│         4│      2.58│    19371.78│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     60│      1000│         0│        61│             5│         1│         2│         2│         2│         4│      2.76│    21744.72│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     70│      1000│         0│        60│             5│         2│         2│         2│         3│         5│      3.24│    21606.99│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     80│      1000│         0│        61│             5│         2│         2│         3│         3│         6│      3.42│    23388.71│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     90│      1000│         0│        60│             5│         3│         3│         3│         3│         6│      3.99│    22572.41│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │    100│      1000│         0│        60│             5│         3│         3│         4│         4│         7│      4.37│    22863.46│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │    200│      1000│         0│        67│             5│         6│         7│         7│         8│        44│      8.42│    23741.48│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │    300│      1000│         0│        89│             6│         9│        10│        11│        11│        53│     11.84│    25329.44│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │    500│      1000│         0│        95│             8│        16│        18│        19│        21│        57│     20.16│    24805.54│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │    750│      1000│         0│       105│             7│        25│        27│        28│        29│        57│     28.77│    26069.76│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │    800│      1000│         0│       114│            10│        27│        30│        34│        43│        70│     33.97│    23546.89│
    // └───────┴──────────┴──────────┴──────────┴──────────────┴──────────┴──────────┴──────────┴──────────┴──────────┴──────────┴────────────┘
    //
    //  zebra
    // ┌───────┬──────────┬──────────┬──────────┬──────────────┬──────────┬──────────┬──────────┬──────────┬──────────┬──────────┬────────────┐
    // │ peers │ requests │ min (ms) │ max (ms) │ std dev (ms) │ 10% (ms) │ 50% (ms) │ 75% (ms) │ 90% (ms) │ 99% (ms) │ time (s) │ requests/s │
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │      1│      1000│         0│        50│             5│         0│         0│         1│         1│         1│      1.46│      687.28│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     10│      1000│         0│        65│             7│         1│         1│         1│         1│        49│      2.34│     4271.73│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     20│      1000│         0│        91│             8│         1│         1│         1│         2│        51│      2.84│     7039.89│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     30│      1000│         0│       139│            12│         1│         1│         1│         2│        67│      4.01│     7479.72│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     40│      1000│         0│       191│            16│         1│         1│         1│         3│        87│      5.28│     7580.59│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     50│      1000│         0│       200│            20│         1│         1│         1│         3│       106│      6.61│     7566.44│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     60│      1000│         0│       203│            22│         1│         1│         2│        11│       119│      8.58│     6989.29│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     70│      1000│         0│       201│            28│         1│         1│         1│         3│       153│      9.28│     7541.37│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     80│      1000│         0│       202│            30│         1│         1│         1│        14│       159│     10.96│     7296.85│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │     90│      1000│         0│       205│            29│         1│         1│         5│        54│       133│     14.82│     6073.34│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │    100│      1000│         0│       209│            33│         1│         1│         3│        57│       156│     15.45│     6470.44│
    // ├───────┼──────────┼──────────┼──────────┼──────────────┼──────────┼──────────┼──────────┼──────────┼──────────┼──────────┼────────────┤
    // │    200│      1000│         0│       249│            55│         1│         2│        42│       121│       200│     33.37│     5993.48│
    // └───────┴──────────┴──────────┴──────────┴──────────────┴──────────┴──────────┴──────────┴──────────┴──────────┴──────────┴────────────┘

    // setup metrics recorder
    enable_simple_recorder().unwrap();

    // number of pings to send per peer
    const PINGS: u16 = 1000;
    const PING_TIMEOUT: Duration = Duration::from_millis(200);
    // number of concurrent peers to test (zcashd hardcaps `max_peers` to 873 on my machine)
    let peer_counts = vec![
        1, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 200, 300, 500, 750, 800,
    ];

    let mut table = RequestsTable::default();

    // start node, with max peers set so that our peers should
    // never be rejected.
    let mut node: Node = Default::default();
    node.initial_action(Action::WaitForConnection)
        .max_peers(peer_counts.iter().max().unwrap() * 2 + 10)
        .start()
        .await;
    let node_addr = node.addr();

    const METRIC_NAME: &str = "ping_perf";

    for peers in peer_counts {
        // clear metrics and register metrics
        simple_metrics::clear();
        metrics::register_histogram!(METRIC_NAME);

        // create N peer nodes which send M ping's as fast as possible
        let mut peer_handles = Vec::with_capacity(peers);

        let test_start = tokio::time::Instant::now();

        for _ in 0..peers {
            peer_handles.push(tokio::spawn(async move {
                let mut stream = initiate_handshake(node_addr).await.unwrap();

                let filter = MessageFilter::with_all_auto_reply();

                for _ in 0..PINGS {
                    let nonce = Nonce::default();
                    let expected = Message::Pong(nonce);
                    Message::Ping(nonce)
                        .write_to_stream(&mut stream)
                        .await
                        .unwrap();
                    let now = tokio::time::Instant::now();
                    loop {
                        match timeout(PING_TIMEOUT, filter.read_from_stream(&mut stream)).await {
                            Err(_elapsed) => {
                                metrics::histogram!(METRIC_NAME, duration_as_ms(PING_TIMEOUT))
                            }
                            Ok(Ok(message)) if message == expected => {
                                metrics::histogram!(METRIC_NAME, duration_as_ms(now.elapsed()))
                            }
                            // If the nonce doesn't match then we treat it as a response to an already timed out Ping
                            // (which has already been handled, so we skip it).
                            Ok(Ok(Message::Pong(_))) => continue,
                            Ok(result) => {
                                panic!("Failed to receive {:?}, got {:?}", expected, result)
                            }
                        }

                        break;
                    }
                }
            }));
        }

        // wait for peers to complete
        for handle in peer_handles {
            handle.await.unwrap();
        }

        let time_taken_secs = test_start.elapsed().as_secs_f64();

        // grab latencies from metrics recoder
        let latencies = simple_metrics::histograms()
            .lock()
            .get(&metrics::Key::from_name(METRIC_NAME))
            .unwrap()
            .value
            .clone();

        // add stats to table display
        table.add_row(RequestStats::new(
            peers as u16,
            PINGS,
            latencies,
            time_taken_secs,
        ));
    }

    node.stop().await;

    // Display results table
    println!("{}", table);
}
